%%HP: T(0)A(D)F(.);
@ Argumentos:
@ Author: Ivan Lopes
@ E-mail: ivanlopes@id.uff.br
@ Version:
\<<

HOME 'root' PGDIR

@ ============================================================================
@ root
@ ============================================================================
DIR
  @
  @ local functions
  @

  @ trocar entre cordenadas retangulares e polar
  =XYZ-POLAR=
  \<< -15 CF -16 FS? \-> X
  \<<
      IF 'X'
      THEN RECT
      ELSE CYLIN
      END
  \>>
  \>>

  @ trocar RAD -> DEG
  =DEG-RAD=
  \<< -18 CF -17 FS? \-> X
  \<<
      IF 'X'
      THEN DEG
      ELSE RAD
      END
  \>>
  \>>

  @ pega a e b no stack e transforma em (a,b)
  S\->C
  \<< \-> a, b
      \<<  '(a,\<) b)' EVAL \>>
  \>>

  inMatSol
  \<< @ a entrada são duas matrizes e suas dimensoes
    @7 -2 -2 12 2 2 -3 -4 2 1
    2 \->LIST
    \->ARRY
    B STO
    2 \->LIST
    \->ARRY
    A STO
    A INV B *
    {A B} PURGE
  \>>

  inMatrref
  \<< @ entrada é o numero de linhas da matriz
    @7 -2 -3 -2 12 -4 2
    DUP 1 +
    2
    \->LIST
    \->ARRY
    RREF
  \>>

  CST
  {{+ \<< 22.2 KEYEVAL uff \>> }
      {HELP HELP}
  }

END 'root' STO root
@ ============================================================================
@ ============================================================================
@ uff
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    in sol cir calc poly stat edo mec
  }

  cpf  \<< 08349232706 \>>
  id   \<< identidade \>>
  ufid \<< 212038104 \>>
  load \<< Load \>>

END 'uff' STO
uff

@ ============================================================================
@ in
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   {Sets sets}
   {C COMPLEX}
   {M MATRIZ}
   {L LISTA}
   ponto
  }

  load \<< Load \>>

END 'in' STO
in
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  inMat
  \<<
    2 \->LIST \->ARRY
  \>>


  CST
  {{\|^  \<< UPDIR Load \>> }
   {M    inMat   }
   {MSol inMatSol}
   {MSol inMatrref}
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

@ ============================================================================
@ in->sets
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   =XYZ-POLAR=
   =DEG-RAD=
  }

  load \<< Load \>>

END 'sets' STO
@ ============================================================================

@ ============================================================================
@ ->COMPLEX
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {op \<< 44.2 KEYEVAL 33.2 KEYEVAL  13.1 KEYEVAL \>> }
   S\->C
   R\->C
   =XYZ-POLAR=
   =DEG-RAD=
   C\->R
  }

  load \<< Load \>>

END 'COMPLEX' STO
@ ============================================================================

@ ============================================================================
@ ->L
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {op \<< 44.2 KEYEVAL 13.1 KEYEVAL \>> }
   {input \->LIST}
  }

  load \<< Load \>>

END 'LISTA' STO
@ ============================================================================

@ ============================================================================
@ ->M
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {op \<< 44.2 KEYEVAL 12.1 KEYEVAL \>> }
   {input \->ARRY}
   {vetor \<< 44.2 KEYEVAL 11.1 KEYEVAL \>> }
  }

  load \<< Load \>>

END 'MATRIZ' STO
@ ============================================================================

@ ============================================================================
@ ->ponto
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {C\->R \<< C\->R \>> }
   {R\->C \<< R\->C \>> }
   {\->NUM \<< \->NUM \>> }
   {\->Q \<< \->Q \>> }
   {reta  \<< R\->C 3 ROLLD R\->C DROITE \->Q \>>}
  }

  load \<< Load \>>

END 'ponto' STO
@ ============================================================================
UPDIR @ estou no uff
@ ============================================================================
@ sol
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   solve
   zeros
   factor
   {expand EXPAND}
  }

  load \<< Load \>>

END 'sol' STO
sol
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {op  \<< 72.2 KEYEVAL \>>  }
   {LS ls}
   {MSol inMatSol}
   {MSol inMatrref}
   {reta  \<< R\->C 3 ROLLD R\->C DROITE \->Q \>> }
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

@ ============================================================================
@ ->solve
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {x \<< SOLVEVX   \>> }
   {y \<< 'Y' SOLVE \>> }
   {z \<< 'Z' SOLVE \>> }
  }

  load \<< Load \>>

END 'solve' STO
@ ============================================================================

@ ============================================================================
@ ->ls
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {2   \<< {2} \->ARRY 's1' STO s1 X Y {2} \->ARRY LINSOLVE \>> }
   {3   \<< {3} \->ARRY 's1' STO s1 Y Z {3} \->ARRY LINSOLVE \>> }
   {4   \<< {4} \->ARRY 's1' STO s1 X Y Z W {4} \->ARRY LINSOLVE \>> }
   {n   \<< \->ARRY LINSOLVE \>> }
  }

  load \<< Load \>>

END 'ls' STO
@ ============================================================================
@ ============================================================================
@ ->zeros
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {x \<< 'X' ZEROS \>>}
   {y \<< 'Y' ZEROS \>>}
   {z \<< 'Z' ZEROS \>>}
  }

  load \<< Load \>>

END 'zeros' STO
@ ============================================================================

@ ============================================================================
@ ->factor
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {f FACTOR}
   {s FACTORS}
   X
   Y
   Z
  }

  load \<< Load \>>

END 'factor' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ cir
@ ============================================================================
DIR
  @
  @ local functions
  @

  =delta-estrela=
  \<< @ "Transformação Δ-Y (Triângulo-Estrela)"
      3 DUPN
      3 DUPN 3 DUPN 3 DUPN
      + +
      4 ROLLD
      + +
      5 ROLLD 5 ROLLD
      + +
      6 PICK 6 PICK
      * SWAP /
      6 ROLLD
      4 ROLL
      4 PICK
      * SWAP /
      4 ROLLD
      3 ROLLD
      * SWAP /
      SWAP
  \>>

  =estrela-delta=
  \<< @ "Transformação Y-Δ (Estrela-Triângulo)"
      3 DUPN
      3 DUPN
      3 DUPN
      * 4 ROLLD
      * SWAP 4 ROLL
      * + + DUP ROT
      / SWAP ROT SWAP DUP 5 ROLL
      / SWAP ROT
      /
      ROT
  \>>

  rp
  \<< @ função resistência em paralelo
      2 DUPN
      INV SWAP INV + INV
  \>>

  dc
  \<< @ função divisor de tensão
      3 DUPN
      DUP UNROT + / *
  \>>

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   dc
   rp
   =delta-estrela=
   =estrela-delta=
  }

  load \<< Load \>>

END 'cir' STO
cir
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   KMAP
   p2
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ calc
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   {Deriv Deriv}
   {Int Int}
   {Vetor Vetor}
  }

  load \<< Load \>>

END 'calc' STO
calc
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  @ derivada de f(x)
  derivadafx
  \<<
    X       @ variável da integração
    \.d     @ derivada de f(X)
  \>>

  @ Integral de X^2
  integralfx
  \<<
    0       @ a
    X       @ b
    3 ROLL  @ pega f(X)
    X       @ variável da integração
    \.S     @ Integral
  \>>

  @ del ou nabla []
  nablaXYZ
  \<<
    + +
    X Y Z
    {3}
    \->ARRY
    @HESS DROP
    DERIV
    DUP DUP DUP
    1 GET
    2 ROLL
    2 GET
    3 ROLL
    3 GET
  \>>

  @ del ou nabla []
  nablaHessXYZ
  \<<
    + +
    X Y Z
    {3}
    \->ARRY
    @HESS DROP
    HESS DROP
    DUP DUP DUP
    1 GET
    2 ROLL
    2 GET
    3 ROLL
    3 GET
  \>>

  CST
  {{\|^  \<< UPDIR Load \>>}
   {dx   \<< derivadafx \>>}
   {Ix   \<< integralfx \>>}
   {\.V  \<< nablaXYZ   \>>}
   {\.V  \<< nablaHessXYZ   \>>}
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

@ ============================================================================
@ ->Deriv
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {x    \<< DERVX        \>> }
   {y    \<< 'Y' DERIV    \>> }
   {z    \<< 'Z' DERIV    \>> }
  }

  load \<< Load \>>

END 'Deriv' STO
@ ============================================================================

@ ============================================================================
@ ->Int
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    {RISCH risch }
    {part  ibp   }
    {def   PREVAL}
  }

  load \<< Load \>>

END 'Int' STO Int
@ ============================================================================

@ ============================================================================
@ ->Int->risch
@ ============================================================================
DIR

  CST
  {{\|^ \<< UPDIR Load \>> }
   {x \<< 'X' RISCH \>> }
   {y \<< 'Y' RISCH \>> }
   {z \<< 'Z' RISCH \>> }
  }

  load \<< Load \>>

END 'risch' STO
@ ============================================================================

@ ============================================================================
@ ->Int->ibp
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {x \<< 'X' IBP \>> }
   {y \<< 'Y' IBP \>> }
   {z \<< 'Z' IBP \>> }
  }

  load \<< Load \>>

END 'ibp' STO
@ ============================================================================

UPDIR

@ ============================================================================
@ ->Vetor
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    {nabla \<< ['X' 'Y' 'Z'] DERIV \>>  }
    {grad  \<< ['X' 'Y' 'Z'] HESS  \>>  }
    {divF  \<< ['X' 'Y' 'Z'] DIV   \>>  }
    {rotF  \<< ['X' 'Y' 'Z'] CURL  \>>  }
  }

  load \<< Load \>>

END 'Vetor' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ poly
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   p
   f
   {expand EXPAND}
   {factor FACTOR}
  }

  load \<< Load \>>

END 'poly' STO
poly
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  @ description:
  @ Algoritmo de Briot-Ruffini, por vezes denominado apenas como regra de Ruffini,
  @ é um método de resolução de frações polinomiais, criado por Paolo Ruffini.
  @ Esse algoritmo consiste em efetuar a divisão fazendo cálculos apenas com
  @ coeficientes e só serve para divisões de um polinômio por um binômio.  As
  @ divisões de polinômios por binômios, como por exemplo: (x-2), (x+3/2) e (x+5),
  @ surgem em problemas de matemática mais frequentemente do que quaisquer outras
  @ divisões de polinômios e desempenham papel importante na pesquisa de zeros de
  @ funções e na resolução de equações.  O quociente e o resto da divisão de um
  @ polinômio P(x) por um binômio do tipo (x-a) podem ser obtidos através de um
  @ dispositivo prático, conhecido como divisão sintética ou algoritmo de
  @ Briot-Ruffini.

  briot
  \<< @ briot(grau, raiz)
      \-> eq, grau, raiz
      \<< {} 'cofs' STO                   @ inicializando cofs como lista vazia
          eq raiz                         @ carrega eq e raiz
          1 grau FOR I                    @
              HORNER cofs + 'cofs' STO    @
          NEXT {1} cofs +
          'cofs' PURGE
      \>>
  \>>
  @


  CST
  {{\|^  \<< UPDIR Load \>> }
   {op \<< 92.2 KEYEVAL 12.1 KEYEVAL \>>}
   briot
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

@ ============================================================================
@ ->p
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    {coef PCOEF}
    {root PROOT}
    {val  PEVAL}
    {input \->ARRY}
  }

  load \<< Load \>>

END 'p' STO
@ ============================================================================

@ ============================================================================
@ ->f
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    {coef FCOEF}
    {root FROOTS}
    {q QUOT}
    {r REMAINDER}
    {part PARTFRAC}
  }

  load \<< Load \>>

END 'f' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ stat
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
    { + P}
    {C COMB}
    {A PERM}
    {R RAND}
  }

  load \<< Load \>>

END 'stat' STO
stat
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   {op \<< 44.2 KEYEVAL 15.1 KEYEVAL \>> }
   {C \<< COMB 3 ROLLD COMB \>> }
   {C \<< PERM 3 ROLLD PERM \>> }
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ edo
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   { op \<< 82.2 KEYEVAL 13.1 KEYEVAL \>> }
   {Lapla LAP }
   {ILapl ILAP}
   {edo0  LDEC}
   {edo   DESOLVE}
  }

  load \<< Load \>>

END 'edo' STO
edo
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   p1
   p2
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

UPDIR @ estou no uff
@ ============================================================================
@ mec
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   { + P}
   {Sets sets}
   mec
  }

  load \<< Load \>>

END 'mec' STO
mec
@UPDIR
@ ============================================================================

@ ============================================================================
@ ->P
@ ============================================================================
DIR

  CST
  {{\|^  \<< UPDIR Load \>> }
   p1
   p2
  }

  load \<< Load \>>

END 'P' STO
@ ============================================================================

UPDIR @ estou no uff
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
HOME
root
\<< 22.2 KEYEVAL \>> 'Load' STO

\>>

