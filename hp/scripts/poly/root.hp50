%%HP: T(0)A(D)F(.);
@ Argumentos:
@ Author: Ivan Lopes
@ E-mail: ivanlopes@id.uff.br
@ Version:

\<<
    HOME
    'root' CRDIR root

    @ Definindo funcoes globais
    @ ========================================================================
    @

    \<< @ up
        UPDIR
        22.2 KEYEVAL
    \>> 'up' STO

    @ =======================================================================
    @ =======================================================================
    @ =======================================================================

    {in sol cir calc poly stat}
    'CST' STO

    @ ========================================================================
    @
    @ INPUT
    @
    @ ========================================================================
    'in' CRDIR in
        @
        @ local functions
        @

        @ trocar entre cordenadas retangulares e polar
        \<< -15 CF -16 FS? \-> X
        \<<
            IF 'X'
            THEN RECT
            ELSE CYLIN
            END
        \>>
        \>> '=XYZ-POLAR=' STO

        @ trocar RAD -> DEG
        \<< -18 CF -17 FS? \-> X
        \<<
            IF 'X'
            THEN DEG
            ELSE RAD
            END
        \>>
        \>> '=DEG-RAD=' STO

        @ pega a e b no stack e transforma em (a,b)
        \<< \-> a, b
            \<<  '(a,\< b)' EVAL \>>
        \>> 'S\->C' STO

        @
        @ diretório de programas
        @
        'onOff' CRDIR onOff
            {{\|^ up}
            =XYZ-POLAR= =DEG-RAD= }
            'CST' STO
        UPDIR
        @
        @ diretório de programas
        @
        'XYZ' CRDIR XYZ
            {{\|^ up}
            X Y Z A B C D E F G H I J K L M N O P Q R S T U V X Z }
            'CST' STO
        UPDIR
        @
        @ diretório de programas
        @
        'C' CRDIR C
            {{\|^ up}
            {op \<< 44.2 KEYEVAL 33.2 KEYEVAL  13.1 KEYEVAL \>> }
             S\->C
            =XYZ-POLAR= =DEG-RAD= }
            'CST' STO
        UPDIR
        @
        @ diretório de programas
        @
        'M' CRDIR M
            {{\|^ up}
            {op \<< 44.2 KEYEVAL 12.1 KEYEVAL \>> }
            {input \->ARRY}
            {vec \<< 44.2 KEYEVAL 11.1 KEYEVAL \>> }
            =XYZ-POLAR= =DEG-RAD= }
            'CST' STO
        UPDIR
        @
        @ diretório de programas
        @
        'L' CRDIR L
            {{\|^ up}
            {op \<< 44.2 KEYEVAL 13.1 KEYEVAL \>> }
            {input \->LIST}
            =XYZ-POLAR= =DEG-RAD= }
            'CST' STO
        UPDIR

        @
        @ menu
        @
         {{\|^ up}
         {OnOff onOff}
         XYZ
         C M L }
         'CST' STO
    UPDIR @ ==================================================================

    @ ========================================================================
    @
    @ SOLVE
    @
    @ ========================================================================
    'sol' CRDIR sol
        @
        @ local functions
        @

        @ foo

        @
        @ diretório de programas
        @

        'P' CRDIR P
            {{\|^ up}
            { op \<< 82.2 KEYEVAL 13.1 KEYEVAL \>> }
            {Lapla LAP }
            {ILapl ILAP}
            {edo0  LDEC}
            {edo   DESOLVE}
            }
            'CST' STO
        UPDIR

        'solve' CRDIR solve
            {{\|^ up}
            {x \<< SOLVEVX \>>}
            {y \<< 'Y' SOLVE \>>}
            {z \<< 'Z' SOLVE \>>} }
            'CST' STO
        UPDIR

        'zeros' CRDIR zeros
            {{\|^ up}
            {x \<< 'X' ZEROS \>>}
            {y \<< 'Y' ZEROS \>>}
            {z \<< 'Z' ZEROS \>>} }
            'CST' STO
        UPDIR

        'factor' CRDIR factor
            {{\|^ up}
            {f FACTOR}
            {s FACTORS}
            }
            'CST' STO
        UPDIR

        @
        @ menu
        @
         {{\|^ up}
         {+ P}
         solve
         zeros
         {expand EXPAND}
         factor }
         'CST' STO

    UPDIR @ ==================================================================

    @ ========================================================================
    @
    @ CIRCUITOS
    @
    @ ========================================================================
    'cir' CRDIR cir

        @
        @ local functions
        @

        \<< @ "Transformação Δ-Y (Triângulo-Estrela)"
            3 DUPN
            3 DUPN 3 DUPN 3 DUPN
            + +
            4 ROLLD
            + +
            5 ROLLD 5 ROLLD
            + +
            6 PICK 6 PICK
            * SWAP /
            6 ROLLD
            4 ROLL
            4 PICK
            * SWAP /
            4 ROLLD
            3 ROLLD
            * SWAP /
            SWAP
        \>> '=delta-estrela='  STO

        \<< @ "Transformação Y-Δ (Estrela-Triângulo)"
            3 DUPN
            3 DUPN
            3 DUPN
            * 4 ROLLD
            * SWAP 4 ROLL
            * + + DUP ROT
            / SWAP ROT SWAP DUP 5 ROLL
            / SWAP ROT
            /
            ROT
        \>> '=estrela-delta=' STO

        \<< @ função resistência em paralelo
            2 DUPN
            INV SWAP INV + INV
        \>>  'rp' STO

        \<< @ função divisor de tensão
            3 DUPN
            DUP UNROT + / *
        \>> 'dc' STO

        @
        @ diretório de programas
        @
        'P' CRDIR P
            {{\|^ up}
            pcA pcB}
            'CST' STO
        UPDIR

        @
        @ menu
        @
         {{\|^ up}
         {+ P}
         dc rp =delta-estrela= =estrela-delta=}
         'CST' STO
    UPDIR @ ==================================================================

    @ ========================================================================
    @
    @ Cálculo
    @
    @ ========================================================================
    'calc' CRDIR calc
        @
        @ local functions
        @

        @ foo

        @
        @ diretório de programas
        @
        'P' CRDIR P
            {{\|^ up}
            cal }
            'CST' STO
        UPDIR
        'dx' CRDIR dx
            {{\|^ up}
            {x \<< DERVX \>>}
            {y \<< 'Y' DERIV \>>}
            {z \<< 'Z' DERIV \>>} }
            'CST' STO
        UPDIR

        'risch' CRDIR risch
            {{\|^ up}
            {x \<< 'X' RISCH \>>}
            {y \<< 'Y' RISCH \>>}
            {z \<< 'Z' RISCH \>>} }
            'CST' STO
        UPDIR

        'ibp' CRDIR ibp
            {{\|^ up}
            {x \<< 'X' IBP \>>}
            {y \<< 'Y' IBP \>>}
            {z \<< 'Z' IBP \>>} }
            'CST' STO
        UPDIR

        'I' CRDIR I
            {{\|^ up}
            {x \<< INTVX \>>}
            {RISCH risch }
            {part  ibp  }
            {def   PREVAL} }
            'CST' STO
        UPDIR

        'III' CRDIR III
            {{\|^ up}
            {nabla \<< ['X' 'Y' 'Z'] DERIV\>>}
            {grad  \<< ['X' 'Y' 'Z'] HESS\>>}
            {divF  \<< ['X' 'Y' 'Z'] DIV\>>}
            {rotF  \<< ['X' 'Y' 'Z'] CURL\>>}}
            'CST' STO
        UPDIR
        @
        @ menu
        @
         {{\|^ up}
         {+ P}
         {I  I}
         {Dx dx}
         {vec III}}
         'CST' STO

    UPDIR @ ==================================================================

    @ ========================================================================
    @
    @ POLINÔMIOS
    @ ==========
    @ ========================================================================

    'poly' CRDIR poly

        @
        @ local functions
        @
        \<< @ briot(grau, raiz)
            \-> grau, raiz
            \<< {} 'cofs' STO                   @ inicializando cofs como lista vazia
                eq raiz                         @ carrega eq e raiz
                1 grau FOR I                    @
                    HORNER cofs + 'cofs' STO    @
                NEXT {1} cofs +
                'cofs' PURGE
            \>>
        \>> 'briot' STO

        @
        @ diretório de programas
        @
        'P' CRDIR P
            {{\|^ up}
            { op \<< 92.2 KEYEVAL 12.1 KEYEVAL \>> }
            briot }
            'CST' STO
        UPDIR

        'f' CRDIR f
            {{\|^ up}
            {coef FCOEF}
            {root FROOTS}
            {q QUOT}
            {r REMAINDER}
            {part PARTFRAC}
            }
            'CST' STO
        UPDIR
        'p' CRDIR p
            {{\|^ up}
            {coef PCOEF}
            {root PROOT}
            {val  PEVAL}
            {input \->ARRY}
            }
            'CST' STO
        UPDIR
        @
        @ menu
        @
         {{\|^ up}
         {+ P}
         p
         f
         {expand EXPAND}
         {factor FACTOR}
         }
         'CST' STO

    UPDIR @ ==================================================================

    @ ========================================================================
    @
    @ Estatística
    @ ===========
    @ ========================================================================

    'stat' CRDIR stat
        @
        @ local functions
        @

        @ foo

        @
        @ diretório de programas
        @
        'P' CRDIR P
            {{\|^ up}
            {op \<< 44.2 KEYEVAL 15.1 KEYEVAL \>> }
            prob }
            'CST' STO
        UPDIR

        @
        @ menu
        @
         {{\|^ up}
         {+ P}
         {C COMB}
         {A PERM}
         {R RAND} }
         'CST' STO

    UPDIR @ ==================================================================

    @ =======================================================================
    @ =======================================================================
    @ =======================================================================

    'uff' CRDIR uff
    \<< HELP
    \>> 'help' STO

    \<< UPDIR
      22.2 KEYEVAL
    \>> 'load' STO
    UPDIR
\>>

